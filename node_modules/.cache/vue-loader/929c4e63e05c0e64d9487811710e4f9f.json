{"remainingRequest":"D:\\working\\Vue\\zuly\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\working\\Vue\\zuly\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\working\\Vue\\zuly\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\working\\Vue\\zuly\\src\\pages\\Store.vue?vue&type=template&id=3e75ef26&","dependencies":[{"path":"D:\\working\\Vue\\zuly\\src\\pages\\Store.vue","mtime":1603893439859},{"path":"D:\\working\\Vue\\zuly\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\working\\Vue\\zuly\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\working\\Vue\\zuly\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\working\\Vue\\zuly\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}